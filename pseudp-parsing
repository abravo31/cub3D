1. Parsing au niveau d'arguments du program : # de arguments, nom de du fichier

./cub3d map.cub

2. Partie coordonnees, texture, colors avec parsing minishell

3. Importer les fonctions modulables de liste chaines a Amanda 

4. Partie map : S'informer a propos de Deep Sequential Model pour materialiser ces idees :


a. Tokens valides dans la map
Un seule characters dans ce liste N, S, W, E
Space, tab, 1, 0, \n, \t (a verifier characters table ascii 7-13)

Pour commencer, verifier si la ligne contient des characters de vides on continue la lecture du fichier.

Algorithmes pour verifier la map:
	BFS - Breadth-First Search 
	DFS - Depth-First Search

Peu importe l'algorithme, on doit recuperer la quantite des lignes et la quantite max de colonne de l'element dans une ligne

On doit regarder chaque case du map dans tous les sens possibles a partir d'un point specifique
explore(x-1, y); // Gauche
explore(x+1, y); // Droite
explore(x, y-1); // Haut
explore(x, y+1); // Bas

6. Gestion d'erreurs avec les messages precises
1 -> Invalid identifier
2 -> Map not closed
3 -> Perso entoure de murs (ne peut pas bouger)
4 -> Multiple personnages
5 -> Texture fausse (ouverture, pas existant) 

7. Pour recuperer l'info, on garde les lignes du fichier en utilisant gnl dans une liste chainee pour ensuite recuperer 
les infos de coordonnees 

8. Essayer d'apprendre le maximum des choses par rapport a git 


